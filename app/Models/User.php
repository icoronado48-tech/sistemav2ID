<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'role_id',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Get the role that owns the User.
     */
    public function role(): BelongsTo
    {
        return $this->belongsTo(Role::class);
    }

    /**
     * Get the purchase orders created by the user.
     */
    public function ordenesCompra(): HasMany
    {
        return $this->hasMany(OrdenCompra::class, 'creada_por_user_id');
    }

    /**
     * Get the production orders created by the user.
     */
    public function ordenesProduccion(): HasMany
    {
        return $this->hasMany(OrdenProduccion::class, 'creada_por_user_id');
    }

    /**
     * Get the lots registered by the user.
     */
    public function lotesRegistrados(): HasMany
    {
        return $this->hasMany(Lote::class, 'registrado_por_user_id');
    }

    /**
     * Get the quality controls supervised by the user.
     */
    public function controlesCalidad(): HasMany
    {
        return $this->hasMany(ControlCalidad::class, 'supervisado_por_user_id');
    }

    /**
     * Get the sales/dispatches registered by the user.
     */
    public function ventasDespachos(): HasMany
    {
        return $this->hasMany(VentaDespacho::class, 'registrado_por_user_id');
    }

    /**
     * Get the raw material receptions recorded by the user.
     */
    public function recepcionesMateriaPrima(): HasMany
    {
        return $this->hasMany(RecepcionMateriaPrima::class, 'recibido_por_user_id');
    }

    /**
     * Get the inventory adjustments made by the user.
     */
    public function ajustesInventario(): HasMany
    {
        return $this->hasMany(AjusteInventario::class, 'realizado_por_user_id');
    }

    /**
     * Get the stock alerts generated by the user.
     */
    public function stockAlertasGeneradas(): HasMany
    {
        return $this->hasMany(StockAlerta::class, 'generado_por_user_id');
    }

    /**
     * Get the production reports generated by the user.
     */
    public function reportesProduccionGenerados(): HasMany
    {
        return $this->hasMany(ReporteProduccion::class, 'generado_por_user_id');
    }

    /**
     * Check if the user has a given role by its name.
     * This method eager loads the 'role' relationship if it's not already loaded,
     * to avoid N+1 query issues when checking roles repeatedly.
     *
     * @param string $roleName The name of the role (e.g., 'administrador', 'produccion').
     * @return bool True if the user has the specified role, false otherwise.
     */
    public function hasRole(string $roleName): bool
    {
        // Check if the 'role' relationship is loaded. If not, load it.
        // This helps prevent N+1 query problems when checking roles frequently.
        if (!$this->relationLoaded('role')) {
            $this->load('role');
        }

        // Return true if the user's role exists and its name matches the given roleName.
        return $this->role && $this->role->nombre_rol === $roleName;
    }

    /**
     * Check if the user has any of the given roles by their names.
     * This method eager loads the 'role' relationship if it's not already loaded.
     *
     * @param array<string> $roleNames An array of role names (e.g., ['produccion', 'inventario']).
     * @return bool True if the user has any of the specified roles, false otherwise.
     */
    public function hasAnyRole(array $roleNames): bool
    {
        // Check if the 'role' relationship is loaded. If not, load it.
        if (!$this->relationLoaded('role')) {
            $this->load('role');
        }

        // Return true if the user's role exists and its name is in the given array of roleNames.
        return $this->role && in_array($this->role->nombre_rol, $roleNames);
    }
}
